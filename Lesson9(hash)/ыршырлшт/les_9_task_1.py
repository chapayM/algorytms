"""
1. Определение количества различных подстрок с использованием хеш-функции.
Пусть на вход функции дана строка. Требуется вернуть количество различных подстрок в этой строке.

Примечания:
* в сумму не включаем пустую строку и строку целиком;
* без использования функций для вычисления хэша (hash(), sha1()
    или любой другой из модуля hashlib задача считается не решённой.
"""
import hashlib


def Rabin_Karp_upgrade(s: str, subs: str) -> int:
    """
    Если подстрока в строке будет отсутствовать,
    то возвращается '-1', иначе номер позиции совпадения
    """
    assert len(s) > 0 and len(subs) > 0, 'Строки не могут быть пустыми'
    assert len(s) > len(subs), 'Подстрока не может быть такой же или длиннее исходной строки'

    len_sub = len(subs)
    h_subs = hashlib.sha1(subs.encode('utf-8')).hexdigest()
    search_count = []
    for i in range(len(s) - len_sub + 1):
        if h_subs == hashlib.sha1(s[i:i + len_sub].encode('utf-8')).hexdigest():
            if s[i:i + len_sub] == subs:
                search_count.append(i)
    
    return search_count if search_count else None


if __name__ == "__main__":
    try:
        s_1 = input('Введите строку: ')
        s_2 = input('Введите подстроку для поиска: ')

        pos_massive = Rabin_Karp_upgrade(s_1, s_2)

        if not pos_massive:
            raise AssertionError(f'В строке "{s_1}" не найдено подстрок "{s_2}"')

        count = len(pos_massive)
        print(f'Найдено {count} совпадений в индексах {pos_massive} подстроки "{s_2}" в строке "{s_1}"')
    except AssertionError as err:
        print(f'Ошибка валидации: {err}')

"""
Введите строку: Я короткая строка
Введите подстроку для поиска: Подстрока оказалась больше
Ошибка валидации: Подстрока не может быть такой же или длиннее исходной строки

Введите строку: Любой из вводов пустой
Введите подстроку для поиска: 
Ошибка валидации: Строки не могут быть пустыми

Введите строку: Я из лесу вышел, был сильный мороз. И только лесник знал, что в морозный день лучше оставаться в лесу ))
Введите подстроку для поиска: лес
Найдено 3 совпадений в индексах [5, 45, 97] подстроки "лес" в строке "Я из лесу вышел, был сильный мороз. И только лесник знал, что в морозный день лучше оставаться в лесу ))"

Введите строку: Я из лесу вышел, был сильный мороз. И только лесник знал, что в морозный день лучше оставаться в лесу ))
Введите подстроку для поиска: noname
Ошибка валидации: В строке "Я из лесу вышел, был сильный мороз. И только лесник знал, что в морозный день лучше оставаться в лесу ))" не найдено подстрок "noname"
"""
